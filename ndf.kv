#:import SlideTransition kivy.uix.screenmanager.SlideTransition
#:import json json
#:import ListAdapter kivy.adapters.listadapter.ListAdapter
#:import Factory kivy.factory.Factory

# THEMING - COLORS
#:set small_button_height '40sp'
#:set backround_color 1, 1, 1, 1
#:set text_color 153/255., 153/255., 153/255., 1
#:set text_color_light 1, 1, 1, 1
#:set text_color_dark 0, 0, 0, 1
#:set button_color 26/255., 26/255., 26/255., 1
#:set button_down_color 60/255., 60/255., 60/255., 1
#:set button_selected_color 90/255., 90/255., 90/255., 1
#:set background_dark 245/255., 245/255., 245/255., 1

BoxLayout:
    canvas.before:
        Color:
            rgba: backround_color
        Rectangle:
            pos: self.pos
            size: self.size

    orientation: 'vertical'
    BoxLayout:
        id: menu
        size_hint_y: None
        height: '48sp'

        MenuButton:
            source: 'data/notes.png'
            text: 'Notes (%s)' % (app.pool and len(app.pool) or 0)
            destinations: ['expenses', ]
            on_press:
                screenmanager.transition.direction = 'right'
                screenmanager.current = 'expenses'


        MenuButton:
            source: "data/add.png"
            text: 'Ajouter'
            disabled: not (app.settings and any(json.loads(app.settings.get('main', 'expensetypes')).values()))
            destinations: ['add', 'kmaddform', 'commonaddform']
            on_press:
                screenmanager.transition.direction = 'left'
                screenmanager.current = 'add'

        MenuButton:
            source: 'data/settings.png'
            text: "Configuration"
            destinations: ['settings', ]
            on_press:
                screenmanager.transition.direction = 'down'
                screenmanager.current = 'settings'

        MenuButton:
            source: 'data/about.png'
            source: 'data/about.png'
            text: "À propos"
            destinations: ['about', ]
            on_press:
                screenmanager.transition.direction = 'up'
                screenmanager.current = 'about'


    ScreenManager:
        id: screenmanager
        opacity: 0.9
        transition: SlideTransition()
        on_current:
            #print self.current
            [x.setter('selected')(x, self.current in x.destinations) for x in menu.children if hasattr(x, 'destinations')]
            #print [(x.text, hasattr(x, 'destinations') and x.destinations, hasattr(x, 'destinations') and self.current in x.destinations, x.selected, '\n') for x in menu.children]

        ExpenseListScreen:
            name: 'expenses'

        AddScreen:
            name: 'add'

        SettingsScreen:
            name: 'settings'

        AboutScreen:
            name: 'about'

        KmAddFormScreen:
            name: 'kmaddform'

        CommonAddFormScreen:
            name: 'commonaddform'


<-MenuButton@Button>:
    selected: False
    source: ''
    text: ''

    on_state: print self.state == 'down'
    on_selected: print "selected %s" % self.selected

    BoxLayout:
        canvas:
            Color:
                rgba:
                    button_selected_color if root.selected else (
                    button_down_color if root.state == 'down' else button_color)

            Rectangle:
                pos: root.pos
                size: root.size

        height: .9 * root.height
        center_y: root.center_y
        x: root.x + sp(2)

        Image:
            color: (1, 1, 1, 1) if not root.disabled else (.4, .4, .4, 1)
            source: root.source
            size_hint_x: None
            width: self.texture_size[0]

        Label:
            text: root.text
            size_hint_x: None
            width: self.texture_size[0]
            color: text_color_light if root.state == 'down' else text_color

<NormalLabel@Label>:
    color: text_color_dark

<-NormalButton@Button>:
    size_hint_y: None
    backround: ''
    backround_down: ''
    color: text_color_light

    canvas:
        Color:
            rgba: button_down_color if self.state == 'down' else button_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        pos: root.pos
        size: root.size
        color: root.color
        text: root.text

<-NormalToggleButton@ToggleButton>:
    backround: ''
    backround_down: ''
    color: text_color_light

    canvas:
        Color:
            rgba: button_down_color if self.state == 'down' else button_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        pos: root.pos
        size: root.size
        color: root.color
        text: root.text

<NormalSpinner@Spinner>:
    option_cls: Factory.NormalSpinnerOption
    backround: ''
    backround_down: ''
    color: text_color_light

    canvas:
        Color:
            rgba: button_down_color if self.state == 'down' else button_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        pos: root.pos
        size: root.size
        color: root.color
        text: root.text

<NormalSpinnerOption@SpinnerOption>:
    backround: ''
    backround_down: ''
    color: text_color_light

    canvas:
        Color:
            rgba: button_down_color if self.state == 'down' else button_color
        Rectangle:
            pos: self.pos
            size: self.size
    Label:
        pos: root.pos
        size: root.size
        color: root.color
        text: root.text

<ServerList>:
    cols: 1
    size_hint_y: None
    height: self.minimum_height
    items: app.settings and app.settings.get('settings', 'servers').split(',') or []

<ServerListItem>:
    size_hint_y: None
    height: small_button_height
    on_release:
        root.parent.target.text = root.serverurl
        app.settings.set('settings', 'server', self.serverurl)
        self.parent.popup.dismiss()

    text: self.servername

<ServerListPopup@Popup>:
    title: 'Choisissez votre Cae'

    TabbedPanel:
        do_default_tab: False
        TabbedPanelItem:
            text: 'Connus'
            BoxLayout:
                orientation: 'vertical'
                ScrollView:
                    ServerList:
                        size_hint_y: None
                        id: servers
                        target: server
                        popup: root

        TabbedPanelItem:
            text: 'Personnalisé'
            BoxLayout:
                orientation: 'vertical'
                CompleteSettingFormTextInput:
                    id: server
                    setting: 'server'
                Widget
                BoxLayout:
                    Widget
                    Button:
                        size_hint: None, None
                        height: small_button_height
                        width: self.texture_size[0] + 30
                        text: 'Valider'
                        on_press: root.dismiss()
                    Widget
                Widget


<SettingsScreen@Screen>:
    BoxLayout:
        orientation: 'vertical'

        BoxLayout:
            orientation: 'vertical'
            Widget:
            GridLayout:
                cols: 2
                Widget:
                Widget:
                NormalLabel:
                    text: 'Serveur'
                    size_hint_y: None
                    height: small_button_height

                NormalButton:
                    id: server
                    height: small_button_height
                    text:
                        (
                        app.settings
                        and app.settings.get('settings', 'server')
                        or 'Sélectionnez votre Cae'
                        )
                    on_release:
                        p = Factory.ServerListPopup(settings=self)
                        p.bind(on_dismiss=lambda *x:
                        self.setter('text')(self, app.settings.get('settings', 'server'))
                        )
                        p.open()

                NormalLabel:
                    text: 'login'
                    size_hint_y: None
                    height: small_button_height
                SettingFormTextInput:
                    id: login
                    setting: 'login'
                    next_form: password

                NormalLabel:
                    size_hint_y: None
                    height: small_button_height
                    text: 'password'

                SettingFormTextInput:
                    id: password
                    setting: 'password'
                    password: True

                #NormalLabel:
                #    size_hint_y: None
                #    height: small_button_height
                #    text: 'sync on wifi only'
                #SettingSwitch:
                #    setting: 'sync_wifi'

            Widget:

            NormalButton:
                height: small_button_height
                text: "Configurer"
                disabled:
                    '' in (
                    password.text, login.text, server.text
                    ) or 'Sélectionnez' in server.text

                on_press:
                    app.check_configuration()

<AboutLabel@NormalLabel>:
    height: self.texture_size[1]
    font_size: '40sp'
    size_hint_y: None

<LinkLabel@AboutLabel>:
    color: 0, 0, 1, 1
    on_touch_down: app.open_mail_link(self.text) if self.collide_point(*args[1].pos) else None

<MailLabel@GridLayout>:
    rows: 1
    size_hint: 1, None
    height: self.minimum_height
    name: ''
    font_size: 0
    mail: ''
    icon: ''
    markup: True
    on_touch_down:
        if self.collide_point(*args[1].pos) and '@' in self.mail: app.open_mail_link(self.mail)
        if self.collide_point(*args[1].pos) and 'http' in self.mail: app.open_link(self.mail)
        else: None

    #AboutLabel:
    #    text:  ' - '
    #    font_size: root.font_size
    #    markup: root.markup
    #    halign: 'left'
    #    valign: 'middle'
    #    size_hint_x: None
    #    width: self.texture_size[1]

    Image:
        height: root.height
        source: root.icon
        center_y: root.center_y
        size_hint_x: None
        width: '100sp'

    AboutLabel:
        text:  root.name
        font_size: root.font_size
        markup: root.markup
        halign: 'left'
        valign: 'middle'
        text_size: self.size[0], None

    AboutLabel:
        text: root.mail
        font_size: root.font_size
        markup: root.markup
        halign: 'center'
        valign: 'middle'
        text_size: self.size[0], None

    Image:
        height: root.height
        source: 'data/letter.png'
        center_y: root.center_y
        size_hint_x: None
        width: '64sp'

<WebLabel@AboutLabel>:
    on_touch_down: app.open_link(self.url) if self.collide_point(*args[1].pos) else None


<AboutScreen@Screen>:
    GridLayout:
        cols: 1
        #size_hint_y: None
        #height: self.minimum_height
        orientation: 'vertical'
        spacing: 10
        Widget
        WebLabel:
            canvas.before:
                Color:
                    rgba: 0, 0, 0, 1
                Rectangle:
                    pos: 0, self.top
                    size: self.width, 1
                Rectangle:
                    pos: 0, self.y
                    size: self.width, 1
            text: 'Get the code on [color=#0000FF]github[/color]!'
            markup: True
            url: "https://www.github.com/CroissanceCommune/ndf_autonomie"
            font_size: '20sp'
            size: self.texture_size[0], 100

        Widget:
            size_hint_y: None
            height: '20sp'

        WebLabel:
            canvas:
                Color:
                    rgba: 0, 0, 0, 1
                Rectangle:
                    pos: (self.width - self.texture_size[0]) / 2, self.y
                    size: self.texture_size[0], 1
            text: 'Une réalisation libre financée par [color=#0000FF]majerti.fr[/color]'
            markup: True
            font_size: '20sp'
            url: 'https://majerti.fr'

        AboutLabel:
            text: 'Développeurs:'
        MailLabel:
            name: 'Gabriel Pettier'
            font_size: '20sp'
            mail: 'contact@gihux.com'
            markup: True
            icon: 'data/gihux.png'
        MailLabel:
            name: 'Gaston Tjebbes'
            mail: 'http://majerti.fr/contact'
            font_size: '20sp'
            markup: True
            icon: 'data/majerti.png'
        MailLabel:
            name: 'Julien Miotte'
            mail: 'http://majerti.fr/contact'
            font_size: '20sp'
            markup: True
            icon: 'data/majerti.png'
        MailLabel:
            name: 'Feth Arezki'
            mail: 'http://majerti.fr/contact'
            font_size: '20sp'
            markup: True
            icon: 'data/majerti.png'
        Widget

<AddScreen@Screen>:
    GridLayout:
        cols: 1 if self.width < self.height else 2
        spacing: '100sp'
        padding: '100sp'
        orientation: 'vertical'

        NormalButton:
            text: 'Frais divers'
            on_press:
                root.manager.transition.direction = 'left'
                root.manager.current = 'commonaddform'

        NormalButton:
            text: 'Frais kilométriques'
            on_press:
                root.manager.transition.direction = 'left'
                root.manager.current = 'kmaddform'

<KmEditFormScreen>:
    BoxLayout:
        orientation: 'vertical'
        NormalButton:
            size_hint_y: None
            height: small_button_height
            text: 'Supprimer'
            on_press:
                app.delete_expense(root.expense)
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'


        GridLayout:
            cols: 2
            Widget:
            Widget:
            Label:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height

            BoxLayout:
                orientation: 'vertical'
                NormalToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                NormalToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            NormalLabel:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height

            NormalSpinner:
                text:
                    root.expense and root.expense.get('type') or u'S\xe9lectionner'
                values:
                    (
                    app.settings and [opt['label'].decode('utf-8') for opt in
                    json.loads(app.settings.get('main',
                    'expensetypes')).get('kmtypes')] or []
                    )

                size_hint_y: None
                height: small_button_height
                on_text:
                    (
                    root.set_value('type', args[0].text,
                    json.loads(app.settings.get('main',
                    'expensetypes')).get('kmtypes'))
                    )

            Widget:
            SelectPrefilButton:
                expenses: list(app.select_expenses(root.expense))

            NormalLabel:
                text: "Date (jj-mm-AAAA)"
            ExpenseFormDateInput:
                id: date
                screen: root
                text: root.get_date()
                expense: root.expense
                next_form: start

            NormalLabel:
                text: "Point de départ"
            ExpenseFormTextInput:
                id: start
                screen: root
                attribute: 'start'
                expense: root.expense
                next_form: end

            NormalLabel:
                text: "Point d'arrivée"
            ExpenseFormTextInput:
                id: end
                screen: root
                attribute: 'end'
                expense: root.expense
                next_form: ht

            NormalLabel:
                text: "Nombre de kilomètres"
            ExpenseFormTextInput:
                id: ht
                screen: root
                attribute: 'km'
                expense: root.expense
                next_form: description

            NormalLabel:
                text: "Description"
            ExpenseFormTextInput:
                id: description
                screen: root
                attribute: 'description'
                expense: root.expense

            Widget:
            Widget:
            Widget:
                size_hint_y: None
                height: small_button_height
                NormalButton:
                    id: valid
                    text: "Enregistrer"
                    height: self.parent.height
                    width: self.parent.width + colspan1.width
                    pos: self.parent.pos
                    on_press:
                        app.store_expense(root.name, root.expense)
                        root.manager.transition.direction = 'right'
                        root.manager.current = 'expenses'
                        date.text = ''
                        start.text = ''
                        end.text = ''
                        ht.text = ''
                        description.text = ''

            Widget:
                id: colspan1


<KmAddFormScreen>:
    on_enter:
        self.expense['transport'] = 'True'
        print self.expense
    BoxLayout:
        orientation: 'vertical'
        NormalButton:
            size_hint_y: None
            height: small_button_height
            text: 'Reset'
            on_press:
                print "reset!"
                root.expense = {'transport': 'True'}

        GridLayout:
            cols: 2
            Widget:
            Widget:
            NormalLabel:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                NormalToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                NormalToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            NormalLabel:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            NormalSpinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                # XXX .decode('utf-8') after ['label'] removed because it
                # caused a crash, not sure it doesn't cause issue
                values: app.settings and [opt['label'] for opt in json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    (
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes'))
                    if self.text in self.values else None
                    )
            NormalLabel:
                text: 'prefils'

            SelectPrefilButton:
                expenses: list(app.select_expenses(root.expense))
            NormalLabel:
                text: "Date (jj-mm-AAAA)"
            ExpenseFormDateInput:
                id: date
                screen: root
                attribute: 'date'
                text: root.get_date()
                expense: root.expense
                next_form: start

            NormalLabel:
                text: "Point de départ"
            ExpenseFormTextInput:
                id: start
                screen: root
                attribute: 'start'
                expense: root.expense
                next_form: end

            NormalLabel:
                text: "Point d'arrivée"
            ExpenseFormTextInput:
                id: end
                screen: root
                attribute: 'end'
                expense: root.expense
                next_form: ht

            NormalLabel:
                text: "Nombre de kilomètres"
            ExpenseFormTextInput:
                id: ht
                screen: root
                attribute: 'km'
                expense: root.expense
                next_form: description

            NormalLabel:
                text: "Description"
            ExpenseFormTextInput:
                id: description
                screen: root
                attribute: 'description'
                expense: root.expense

            Widget:
            Widget:
            Widget:
                size_hint_y: None
                height: small_button_height
                NormalButton:
                    id: valid
                    text: "Enregistrer"
                    height: self.parent.height
                    width: self.parent.width + colspan1.width
                    pos: self.parent.pos
                    disabled: not (root.expense and root.expense.get('type'))
                    on_press:
                        app.store_expense(root.name, root.expense)
                        root.manager.transition.direction = 'right'
                        root.manager.current = 'expenses'
                        root.expense = {}
                        date.text = ''
                        start.text = ''
                        end.text = ''
                        ht.text = ''
                        description.text = ''

            Widget:
                id: colspan1

<CommonAddFormScreen>:
    on_enter:
        self.expense['transport'] = 'False'
        print self.expense
    BoxLayout:
        orientation: 'vertical'

        NormalButton:
            size_hint_y: None
            height: small_button_height
            text: 'Reset'
            on_press:
                root.expense = {'transport': 'False'}

        GridLayout:
            cols: 2
            Widget:
            Widget:
            NormalLabel:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                NormalToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                NormalToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            NormalLabel:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            NormalSpinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                # XXX .decode('utf-8') after ['label'] removed because it
                # caused a crash, not sure it doesn't cause issue
                values: app.settings and [opt['label'] for opt in json.loads(app.settings.get('main', 'expensetypes')).get('expensetypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    (
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('expensetypes'))
                    if self.text in self.values else None
                    )
            Label:
                text: 'prefils'
            SelectPrefilButton:
                expenses: list(app.select_expenses(root.expense))

            NormalLabel:
                text: "Date (jj-mm-AAAA)"
            ExpenseFormDateInput:
                id: date
                screen: root
                attribute: 'date'
                text: root.get_date()
                expense: root.expense
                next_form: description

            NormalLabel:
                text: "Description"
            ExpenseFormTextInput:
                id: description
                screen: root
                attribute: 'description'
                expense: root.expense
                next_form: ht

            NormalLabel:
                text: "Montant HT"
            ExpenseFormTextInput:
                id: ht
                screen: root
                attribute: 'ht'
                expense: root.expense
                next_form: tva

            NormalLabel:
                text: "Montant de la TVA"
            ExpenseFormTextInput:
                id: tva
                screen: root
                attribute: 'tva'
                expense: root.expense

            Widget:
            Widget:
            Widget:
                size_hint_y: None
                height: small_button_height
                NormalButton:
                    id: valid
                    text: "Enregistrer"
                    height: self.parent.height
                    width: self.parent.width + colspan1.width
                    pos: self.parent.pos
                    disabled: not (root.expense and root.expense.get('type'))
                    on_press:
                        app.store_expense(root.name, root.expense)
                        root.manager.transition.direction = 'right'
                        root.manager.current = 'expenses'
                        root.expense = {}
                        date.text = ''
                        description.text = ''
                        ht.text = ''
                        tva.text = ''


            Widget:
                id: colspan1

<CommonEditFormScreen>:
    BoxLayout:
        orientation: 'vertical'
        NormalButton:
            size_hint_y: None
            height: small_button_height
            text: 'Supprimer'
            on_press:
                app.delete_expense(root.expense)
                root.manager.transition.direction = 'right'
                root.manager.current = 'expenses'

        GridLayout:
            cols: 2
            Widget:
            Widget:
            NormalLabel:
                text: "Catégorie de frais"
                size_hint_y: None
                height: small_button_height
            BoxLayout:
                orientation: 'vertical'
                NormalToggleButton:
                    text: u"Frais direct de fonctionnement"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "1" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"1")
                NormalToggleButton:
                    text: "Frais liés à l'activité auprès de vos clients"
                    group: "category"
                    height: small_button_height
                    state: root.expense and root.expense.get('category') == "2" and 'down' or 'normal'
                    on_release:
                        root.set_value("category", u"2")
            NormalLabel:
                text: "Type de frais"
                size_hint_y: None
                height: small_button_height
            NormalSpinner:
                text: root.expense and root.expense.get('type') or u'S\xe9lectionner'
                # XXX .decode('utf-8') after ['label'] removed because it
                # caused a crash, not sure it doesn't cause issue
                values: app.settings and [opt['label'] for opt in json.loads(app.settings.get('main', 'expensetypes')).get('expensetypes')] or []
                size_hint_y: None
                height: small_button_height
                on_text:
                    (
                    root.set_value('type', args[0].text, json.loads(app.settings.get('main', 'expensetypes')).get('kmtypes'))
                    if self.text in self.values else None
                    )
            Widget
            SelectPrefilButton:
                expenses: list(app.select_expenses(root.expense))
            NormalLabel:
                text: "Date (jj-mm-AAAA)"
            ExpenseFormDateInput:
                id: date
                screen: root
                attribute: 'date'
                text: root.get_date()
                expense: root.expense
                next_form: description

            NormalLabel:
                text: "Description"
            ExpenseFormTextInput:
                id: description
                screen: root
                attribute: 'description'
                expense: root.expense
                next_form: ht

            NormalLabel:
                text: "Montant HT"
            ExpenseFormTextInput:
                id: ht
                screen: root
                attribute: 'ht'
                expense: root.expense
                next_form: tva

            NormalLabel:
                text: "Montant de la TVA"
            ExpenseFormTextInput:
                id: tva
                screen: root
                attribute: 'tva'
                expense: root.expense

            Widget:
            Widget:
            Widget:
                size_hint_y: None
                height: small_button_height
                NormalButton:
                    id: valid
                    text: "Enregistrer"
                    height: self.parent.height
                    width: self.parent.width + colspan1.width
                    pos: self.parent.pos
                    disabled: not (root.expense and root.expense.get('type'))
                    on_press:
                        app.store_expense(root.name, root.expense)
                        root.manager.transition.direction = 'right'
                        root.manager.current = 'expenses'
                        date.text = ''
                        description.text = ''
                        ht.text = ''
                        tva.text = ''

            Widget:
                id: colspan1

<ExpenseListScreen@Screen>:
    BoxLayout:
        orientation: 'vertical'
        GridLayout:
            rows: 1
            padding: 10
            size_hint_y: None
            height: self.minimum_height
            Button:
                id: btn
                size_hint: 1, None
                height: '48sp'
                on_press: app.sync_datas()
                disabled: not app.pool or not len(app.pool.tosync())
                #background_color: 1, 1, 1, 1
                background_down: ''
                background_disabled_down: ''
                background_normal: ''
                disabled_image: ''
                opacity: 0 if self.disabled else 1

                FloatLayout:
                    pos: btn.pos
                    size: btn.size
                    Image:
                        center: self.parent.center
                        source: 'data/sync.png'
                        width: self.texture_size[0]
                        size_hint_x: None

                    Label:
                        color: text_color_dark
                        #size: self.texture_size
                        #size_hint: 1, None
                        #center_x: self.parent.center_x
                        pos: self.parent.pos
                        text_size: None, None
                        halign: 'center'
                        text: '%s' % (app.pool and len(app.pool.tosync()) or '')

        ListView:
            adapter: ListAdapter(data=root.data, cls=Factory.ExpenseListItem, args_converter=root.args_converter)

<ExpenseListItem>:
    height: '36sp'
    size_hint_y: None

    canvas:
        Color:
            rgba: background_dark
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgb: .3, .3, .3
        Rectangle:
            pos: self.pos
            size: self.width, 1

    BoxLayout:
        padding: '5dp'

        Image:
            source: 'data/valid_16.png' if root.synced else  'data/edit_16.png' if root.todo in ('update', 'add') else 'data/delete_16.png' if root.todo == 'delete' else ''
            mipmap: True
            size_hint_x: None
            width: self.height

        NormalLabel:
            text: root.date

        NormalLabel:
            text: root.description

        NormalButton:
            size_hint_y: 1
            text: '>'
            size_hint_x: None
            width: self.height
            on_release: app.edit_expense(root.index)



<SyncPopup>:
    size_hint: .9, .5
    title: 'syncing'
    auto_dismiss: False

    BoxLayout:
        canvas:
            Color:
                rgba: background_dark
            Rectangle:
                pos: self.pos
                size: self.size

        orientation: 'vertical'
        Label:
            text: '%s/%s' % (root.progress, len(app.settings.items('tosync')))

        Widget:
            size_hint_y: None
            height: '30sp'
            canvas:
                Color:
                    rgba: 1, 1, 1, 1
                Rectangle:
                    pos: self.pos
                    size: self.size

                Color:
                    rgba: .5, .5, .5, 1
                Rectangle:
                    pos: self.x + 4, self.y + 4
                    size:
                        (
                        (self.width - 8) * (root.progress / (len(app.settings.items('tosync'))+1)),
                        self.height - 8
                        )
        NormalButton:
            text: 'errors: %s' % len(root.errors)
            # XXX do some error display

        NormalButton:
            activated: root.done
            text: 'Ok'
            on_press: root.dismiss()

        ScrollView:
            GridLayout:
                height: self.minimum_height
                size_hint_y: None
                cols: 1

                NormalLabel:
                    text: ''.join(unicode(x) for x in root.errors)
                    size_hint_y: None
                    height: self.texture_size[1] + 2 * self.line_height

<DDButton@Button>:
    size_hint_y: None
    height: self.texture_size[1] + 5

<NormalPopup@Popup>:
    size_hint: .8, .8
    title_color: text_color_dark
    separator_color: backround_color
    background: 'data/rounded-border.png'
    border: 4, 4, 4, 4

<FormTextInput@TextInput>:
    multiline: False
    size_hint_y: None
    height: small_button_height
    on_focus: if not self.focus: self.dispatch('on_text_validate')

<SettingFormTextInput@FormTextInput>:
    setting: ''
    next_form: None
    text: app.settings and self.setting and app.settings.get('settings', self.setting) or ''
    on_text_validate:
        app.settings.set('settings', self.setting, args[0].text)
        if self.next_form: self.next_form.focus = True

<CompleteSettingFormTextInput@SettingFormTextInput+CompleteTextInput>:

<SettingSwitch@Switch>:
    setting: ''
    size_hint_y: None
    height: small_button_height
    active: app.settings and self.setting and app.settings.get('settings', self.setting) == 'True' or False
    on_active: app.settings.set('settings', self.setting, str(args[1]))

<ExpenseFormInput@ExpenseDispatcher+FormTextInput>:
    attribute: ''
    next_form: None
    disabled: not (self.expense and self.expense.get('type'))
    on_text_validate:
        self.screen.set_value(self.attribute, self.text.decode('utf-8'))
        if self.next_form: self.next_form.focus = True

<ExpenseFormDateInput@ExpenseFormInput>:
    text: self.expense and self.screen.get_date() or u''
    on_text:
        print "stored ",  self.expense.get('date')
        print "displayed ", self.text

<ExpenseFormTextInput@ExpenseFormInput>:
    text: self.expense and self.expense.get(self.attribute) or u''

<PrefilEntry>:
    size_hint_y: None
    height: small_button_height
    text: '%s - %s' % (self.entry.get('description'), self.entry.get('ht')) if self.entry else ''

    on_press:
        app.manager.current_screen.expense.update(self.entry)
        self.popup.dismiss()

<SelectPrefilPopup>:
    size_hint: .8, .8
    title: 'Séléctionner une entrée précédente comme modèle'

    ScrollView:
        GridLayout:
            cols: 1
            id: container
            size_hint_y: None
            height: self.minimum_height

<SelectPrefilButton@NormalButton>:
    expenses: []
    text: 'Utiliser saisie précédente (%s)' % len(self.expenses)
    on_press: Factory.SelectPrefilPopup(entries=self.expenses).open()
    disabled: not len(self.expenses)
